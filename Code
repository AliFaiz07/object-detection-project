import cv2
import numpy as np
import os
import time

def load_yolo_model(weights_path, config_path):
    net = cv2.dnn.readNet(weights_path, config_path)
    layer_names = net.getLayerNames()
    unconnected_layers = net.getUnconnectedOutLayers()
    output_layers = [layer_names[i - 1] for i in unconnected_layers.flatten()]
    return net, output_layers

def get_labels(labels_path):
    with open(labels_path, "r") as f:
        labels = [line.strip() for line in f.readlines()]
    return labels

def detect_objects(img, net, output_layers):
    height, width, channels = img.shape
    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)
    class_ids, confidences, boxes = [], [], []
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)
    return class_ids, confidences, boxes

def save_cropped_objects(img, boxes, frame_id):
    output_dir = "cropped_objects"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    height, width, channels = img.shape
    for i, (x, y, w, h) in enumerate(boxes):
        x = max(0, x)
        y = max(0, y)
        w = min(w, width - x)
        h = min(h, height - y)
        cropped_object = img[y:y+h, x:x+w]
        if cropped_object.size != 0:
            filename = os.path.join(output_dir, f'frame_{frame_id}_obj_{i}.png')
            cv2.imwrite(filename, cropped_object)

def process_video(video_path, weights_path, config_path, labels_path):
    start_time = time.time()  # Start timing
    net, output_layers = load_yolo_model(weights_path, config_path)
    labels = get_labels(labels_path)
    cap = cv2.VideoCapture(video_path)
    frame_id = 0
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        class_ids, confidences, boxes = detect_objects(frame, net, output_layers)
        save_cropped_objects(frame, boxes, frame_id)
        frame_id += 1
    cap.release()
    end_time = time.time()  # End timing
    print(f"Total processing time: {end_time - start_time:.2f} seconds")

if __name__ == "__main__":
    video_path = "C:\\Users\\HP\\Downloads\\videoplayback.webm"  # Replace with your video file path
    weights_path = "C:\\Users\\HP\\Downloads\\yolov3.weights"  # Replace with your yolov3.weights path
    config_path = "C:\\Users\\HP\\Downloads\\yolov3.cfg"  # Replace with your yolov3.cfg path
    labels_path = "C:\\Users\\HP\\Downloads\\coco.names"  # Replace with your coco.names path
    process_video(video_path, weights_path, config_path, labels_path)
